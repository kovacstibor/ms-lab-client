/**
 * ConcertOne
 * This is a simple sample server for the basic CRUD operations about concert events. The server was made only for the homework of [Mobile Software Laboratory](https://www.aut.bme.hu/Course/VIAUMB02) course at BME.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kovacs.tibor@outlook.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package bme.mobillabor.concertone.model;

import com.google.gson.annotations.SerializedName;

public class ConcertBaseData {
  
  @SerializedName("id")
  private Integer id = null;
  @SerializedName("artist")
  private String artist = null;
  @SerializedName("date")
  private String date = null;
  @SerializedName("location")
  private String location = null;
  @SerializedName("ticketPrice")
  private Double ticketPrice = null;

  /**
   * The unique identifier of the concert.
   * minimum: 0
   **/
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }

  /**
   * The artist of the concert.
   **/
  public String getArtist() {
    return artist;
  }
  public void setArtist(String artist) {
    this.artist = artist;
  }

  /**
   * The day of the concert.
   **/
  public String getDate() {
    return date;
  }
  public void setDate(String date) {
    this.date = date;
  }

  /**
   * The location of the concert.
   **/
  public String getLocation() {
    return location;
  }
  public void setLocation(String location) {
    this.location = location;
  }

  /**
   * The unit price of a ticket for the concert.
   * minimum: 0
   * maximum: 100000
   **/
  public Double getTicketPrice() {
    return ticketPrice;
  }
  public void setTicketPrice(Double ticketPrice) {
    this.ticketPrice = ticketPrice;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConcertBaseData concertBaseData = (ConcertBaseData) o;
    return (this.id == null ? concertBaseData.id == null : this.id.equals(concertBaseData.id)) &&
        (this.artist == null ? concertBaseData.artist == null : this.artist.equals(concertBaseData.artist)) &&
        (this.date == null ? concertBaseData.date == null : this.date.equals(concertBaseData.date)) &&
        (this.location == null ? concertBaseData.location == null : this.location.equals(concertBaseData.location)) &&
        (this.ticketPrice == null ? concertBaseData.ticketPrice == null : this.ticketPrice.equals(concertBaseData.ticketPrice));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.artist == null ? 0: this.artist.hashCode());
    result = 31 * result + (this.date == null ? 0: this.date.hashCode());
    result = 31 * result + (this.location == null ? 0: this.location.hashCode());
    result = 31 * result + (this.ticketPrice == null ? 0: this.ticketPrice.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConcertBaseData {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  artist: ").append(artist).append("\n");
    sb.append("  date: ").append(date).append("\n");
    sb.append("  location: ").append(location).append("\n");
    sb.append("  ticketPrice: ").append(ticketPrice).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
